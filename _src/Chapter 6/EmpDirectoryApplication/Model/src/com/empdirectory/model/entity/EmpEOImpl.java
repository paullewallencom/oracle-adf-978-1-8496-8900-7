package com.empdirectory.model.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.domain.RowID;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 09 23:06:05 CDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmpEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Empno {
            public Object get(EmpEOImpl obj) {
                return obj.getEmpno();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setEmpno((Integer)value);
            }
        }
        ,
        Ename {
            public Object get(EmpEOImpl obj) {
                return obj.getEname();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setEname((String)value);
            }
        }
        ,
        Job {
            public Object get(EmpEOImpl obj) {
                return obj.getJob();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setJob((String)value);
            }
        }
        ,
        Mgr {
            public Object get(EmpEOImpl obj) {
                return obj.getMgr();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setMgr((Integer)value);
            }
        }
        ,
        Hiredate {
            public Object get(EmpEOImpl obj) {
                return obj.getHiredate();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setHiredate((Timestamp)value);
            }
        }
        ,
        Sal {
            public Object get(EmpEOImpl obj) {
                return obj.getSal();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setSal((BigDecimal)value);
            }
        }
        ,
        Comm {
            public Object get(EmpEOImpl obj) {
                return obj.getComm();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setComm((BigDecimal)value);
            }
        }
        ,
        Deptno {
            public Object get(EmpEOImpl obj) {
                return obj.getDeptno();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setDeptno((Integer)value);
            }
        }
        ,
        Rowid {
            public Object get(EmpEOImpl obj) {
                return obj.getRowid();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DeptEO {
            public Object get(EmpEOImpl obj) {
                return obj.getDeptEO();
            }

            public void put(EmpEOImpl obj, Object value) {
                obj.setDeptEO((DeptEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EmpEOImpl object);

        public abstract void put(EmpEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EMPNO = AttributesEnum.Empno.index();
    public static final int ENAME = AttributesEnum.Ename.index();
    public static final int JOB = AttributesEnum.Job.index();
    public static final int MGR = AttributesEnum.Mgr.index();
    public static final int HIREDATE = AttributesEnum.Hiredate.index();
    public static final int SAL = AttributesEnum.Sal.index();
    public static final int COMM = AttributesEnum.Comm.index();
    public static final int DEPTNO = AttributesEnum.Deptno.index();
    public static final int ROWID = AttributesEnum.Rowid.index();
    public static final int DEPTEO = AttributesEnum.DeptEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmpEOImpl() {
    }

    /**
     * Gets the attribute value for Empno, using the alias name Empno.
     * @return the value of Empno
     */
    public Integer getEmpno() {
        return (Integer)getAttributeInternal(EMPNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Empno.
     * @param value value to set the Empno
     */
    public void setEmpno(Integer value) {
        setAttributeInternal(EMPNO, value);
    }

    /**
     * Gets the attribute value for Ename, using the alias name Ename.
     * @return the value of Ename
     */
    public String getEname() {
        return (String)getAttributeInternal(ENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ename.
     * @param value value to set the Ename
     */
    public void setEname(String value) {
        setAttributeInternal(ENAME, value);
    }

    /**
     * Gets the attribute value for Job, using the alias name Job.
     * @return the value of Job
     */
    public String getJob() {
        return (String)getAttributeInternal(JOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Job.
     * @param value value to set the Job
     */
    public void setJob(String value) {
        setAttributeInternal(JOB, value);
    }

    /**
     * Gets the attribute value for Mgr, using the alias name Mgr.
     * @return the value of Mgr
     */
    public Integer getMgr() {
        return (Integer)getAttributeInternal(MGR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mgr.
     * @param value value to set the Mgr
     */
    public void setMgr(Integer value) {
        setAttributeInternal(MGR, value);
    }

    /**
     * Gets the attribute value for Hiredate, using the alias name Hiredate.
     * @return the value of Hiredate
     */
    public Timestamp getHiredate() {
        return (Timestamp)getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hiredate.
     * @param value value to set the Hiredate
     */
    public void setHiredate(Timestamp value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for Sal, using the alias name Sal.
     * @return the value of Sal
     */
    public BigDecimal getSal() {
        return (BigDecimal)getAttributeInternal(SAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sal.
     * @param value value to set the Sal
     */
    public void setSal(BigDecimal value) {
        setAttributeInternal(SAL, value);
    }

    /**
     * Gets the attribute value for Comm, using the alias name Comm.
     * @return the value of Comm
     */
    public BigDecimal getComm() {
        return (BigDecimal)getAttributeInternal(COMM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Comm.
     * @param value value to set the Comm
     */
    public void setComm(BigDecimal value) {
        setAttributeInternal(COMM, value);
    }

    /**
     * Gets the attribute value for Deptno, using the alias name Deptno.
     * @return the value of Deptno
     */
    public Integer getDeptno() {
        return (Integer)getAttributeInternal(DEPTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Deptno.
     * @param value value to set the Deptno
     */
    public void setDeptno(Integer value) {
        setAttributeInternal(DEPTNO, value);
    }

    /**
     * Gets the attribute value for Rowid, using the alias name Rowid.
     * @return the value of Rowid
     */
    public RowID getRowid() {
        return (RowID)getAttributeInternal(ROWID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity DeptEOImpl.
     */
    public DeptEOImpl getDeptEO() {
        return (DeptEOImpl)getAttributeInternal(DEPTEO);
    }

    /**
     * Sets <code>value</code> as the associated entity DeptEOImpl.
     */
    public void setDeptEO(DeptEOImpl value) {
        setAttributeInternal(DEPTEO, value);
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.empdirectory.model.entity.EmpEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
